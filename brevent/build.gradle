apply plugin: 'com.android.application'
if (file('fabric.properties').exists()) {
    apply plugin: 'io.fabric'
}

android {
    compileSdkVersion rootProject.targetSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    if (rootProject.file('ant.properties').exists()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(rootProject.file('ant.properties')))

        if (!rootProject.isIde && rootProject.file('brevent-server').exists()) {
            dexOptions {
                additionalParameters += '--main-dex-list=build/maindexlist.txt'
                additionalParameters += '--minimal-main-dex'
            }
        }

        defaultConfig {
            manifestPlaceholders = [icon: 'ic_brevent']
            applicationId 'me.piebridge.brevent'
            versionCode rootProject.versionCode
            versionName rootProject.versionName
            minSdkVersion rootProject.minSdkVersion
            maxSdkVersion rootProject.targetSdkVersion
            targetSdkVersion rootProject.targetSdkVersion
            buildConfigField 'boolean', 'RELEASE', properties['build.release']
            buildConfigField 'String', 'DONATE_ALIPAY', properties['build.alipay']
            buildConfigField 'byte[]', 'DONATE_PLAY', properties['build.play']
            buildConfigField 'String', 'FEEDBACK', properties['build.feedback']
            buildConfigField 'String', 'EMAIL', properties['build.email']
            buildConfigField 'String', 'PROJECT', properties['build.project']
            buildConfigField 'byte[]', 'SIGNATURE', properties['build.signature']
            buildConfigField 'char[]', 'SERVER', properties['build.server']
            buildConfigField 'char[]', 'FLYME_CLONE', properties['build.flyme.clone']
            buildConfigField 'byte[]', 'ADB_D', properties['build.adb.d']
            buildConfigField 'byte[]', 'ADB_M', properties['build.adb.m']
            buildConfigField 'byte[]', 'ADB_K', properties['build.adb.k']
            buildConfigField 'byte[]', 'DONATE_M', properties['build.donate.m']
            resConfigs 'en', 'zh-rCN', 'zh-rTW', 'es', 'pl'
            resValue 'string', 'appId', 'me.piebridge.brevent'
            if (rootProject.isIde) {
                resValue 'string', 'brevent', 'Brevent'
            } else {
                resValue 'string', 'brevent', '@string/app_name'
            }
            buildConfigField 'int', 'ICON', 'me.piebridge.brevent.R.mipmap.ic_brevent'
            buildConfigField 'int', 'IC_STAT', 'me.piebridge.brevent.R.drawable.ic_stat_brevent'
            multiDexEnabled true
        }

        signingConfigs {
            release {
                storeFile file(properties['key.store'])
                storePassword properties['key.store.password']
                keyAlias properties['key.alias']
                keyPassword properties['key.alias.password']
            }
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
            debug {
                signingConfig signingConfigs.release
            }
        }
        project.ext.apkName = "br-v${rootProject.simpleVersionName}.apk"
    } else {
        defaultConfig {
            manifestPlaceholders = [icon: 'ic_nrevent']
            applicationId 'me.piebridge.nrevent'
            versionCode rootProject.versionCode
            versionName rootProject.versionName
            minSdkVersion rootProject.minSdkVersion
            maxSdkVersion rootProject.targetSdkVersion
            targetSdkVersion rootProject.targetSdkVersion
            buildConfigField 'boolean', 'RELEASE', 'false'
            buildConfigField 'String', 'DONATE_ALIPAY', 'null'
            buildConfigField 'byte[]', 'DONATE_PLAY', 'null'
            buildConfigField 'String', 'FEEDBACK', 'null'
            buildConfigField 'String', 'EMAIL', 'null'
            buildConfigField 'String', 'PROJECT', 'null'
            buildConfigField 'byte[]', 'SIGNATURE', 'null'
            buildConfigField 'char[]', 'SERVER', 'null'
            buildConfigField 'char[]', 'FLYME_CLONE', 'null'
            buildConfigField 'byte[]', 'ADB_D', 'null'
            buildConfigField 'byte[]', 'ADB_M', 'null'
            buildConfigField 'byte[]', 'ADB_K', 'null'
            buildConfigField 'byte[]', 'DONATE_M', 'null'
            resValue 'string', 'appId', 'me.piebridge.nrevent'
            if (rootProject.isIde) {
                resValue 'string', 'brevent', 'Brevent'
            } else {
                resValue 'string', 'brevent', '@string/app_name_debug'
            }
            buildConfigField 'int', 'ICON', 'me.piebridge.brevent.R.mipmap.ic_nrevent'
            buildConfigField 'int', 'IC_STAT', 'me.piebridge.brevent.R.drawable.ic_stat_nrevent'
        }
        project.ext.apkName = 'ce.apk'
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == 'release') {
                output.outputFileName = project.ext.apkName
            }
        }
    }

    sourceSets {
        main {
            jni.srcDirs = []
            if (!rootProject.isIde) {
                jniLibs.srcDirs = ['src/main/libs']
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    if (rootProject.isIde) {
        // for ide
        externalNativeBuild {
            ndkBuild {
                path 'src/main/jni/Android.mk'
            }
        }
    }

    packagingOptions {
        exclude '/fabric/*.properties'
        exclude '/META-INF/*.version'
        exclude '/assets/crashlytics-build.properties'
    }
}

dependencies {
    if (rootProject.file('support-compat-nores').exists()) {
        implementation project(':support-compat-nores')
    } else {
        implementation "com.android.support:support-compat:${rootProject.supportLibraryVersion}"
    }
    implementation("com.android.support:support-core-ui:${rootProject.supportLibraryVersion}") {
        exclude group: 'com.android.support', module: 'support-compat'
    }
    implementation("com.android.support:support-core-utils:${rootProject.supportLibraryVersion}") {
        exclude group: 'com.android.support', module: 'support-compat'
    }
    implementation("com.android.support:support-v13:${rootProject.supportLibraryVersion}") {
        exclude group: 'com.android.support', module: 'support-v4'
    }
    implementation "com.android.support:cardview-v7:${rootProject.supportLibraryVersion}"
    implementation("com.android.support:recyclerview-v7:${rootProject.supportLibraryVersion}") {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-core-ui'
    }
    if (rootProject.file('design-snackbar-tablayout').exists()) {
        implementation project(':design-snackbar-tablayout')
    } else {
        implementation project(':appcompat-dummy')
        implementation("com.android.support:design:${rootProject.supportLibraryVersion}") {
            exclude group: 'com.android.support', module: 'appcompat-v7'
        }
    }
    // https://dl.google.com/dl/android/maven2/com/android/support/constraint/constraint-layout/maven-metadata.xml
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation project(':brevent-ui')
    Properties properties = new Properties()
    if (rootProject.file('ant.properties').exists()) {
        properties.load(new FileInputStream(rootProject.file('ant.properties')))
    }
    if (properties['build.release'] == 'true') {
        implementation project(':donation')
        implementation project(':stats-fabric')
    } else {
        implementation project(':donation-dummy')
        implementation project(':stats-dummy')
    }
    implementation project(':brevent-protocol')
    implementation project(':brevent-override')
    implementation project(':brevent-override-m')
    implementation project(':log-reader')
}

if (rootProject.file('brevent-server').exists()) {
    dependencies {
        implementation project(':brevent-server')
    }

    task genMainDexList {
        doLast {
            def path = fileTree(dir: 'build/intermediates/transforms/proguard', include: '**/*.jar').asPath
            def writer = new PrintWriter('build/maindexlist.txt')
            def file = new java.util.zip.ZipFile(path)
            file.entries().each {
                if (!it.name.startsWith('me/piebridge/brevent/server')) {
                    writer.println(it.name)
                }
            }
            writer.close()
        }
    }

    tasks.whenTaskAdded { task ->
        if (!rootProject.isIde && task.name == 'transformClassesAndResourcesWithProguardForRelease') {
            task.finalizedBy genMainDexList
        } else if (task.name == 'crashlyticsUploadDeobsRelease') {
            task.enabled = false
        }
    }
} else {
    dependencies {
        implementation 'org.slf4j:slf4j-simple:1.7.25'
    }
}

if (rootProject.isIde) {
    // for ide
    dependencies {
        api project(':hidden-api')
    }
} else {
    // for gradle
    dependencies {
        compileOnly rootProject.hiddenApi
    }
}

task renameBootstrap {
    doLast {
        rootProject.abiFilters.each { abi ->
            copy {
                from file("src/main/libs/${abi}/brevent")
                into "src/main/libs/${abi}"
                rename { 'libbrevent.so' }
            }
            delete file("src/main/libs/${abi}/brevent")
        }
    }
}

def getNdkBuild = { ->
    def ndkBuild = file("${android.ndkDirectory}/ndk-build.cmd")
    if (ndkBuild.exists()) {
        return ndkBuild.path
    } else {
        return file("${android.ndkDirectory}/ndk-build").path
    }
}

task buildBootstrap(type: Exec) {
    commandLine getNdkBuild(),
            '-C', file('src/main/jni').path,
            'APP_BUILD_SCRIPT=Android.mk',
            'NDK_APPLICATION_MK=Application.mk'
}

buildBootstrap.dependsOn ':hidden-api:bundleRelease'
buildBootstrap.finalizedBy renameBootstrap

task cleanBootstrap(type: Exec) {
    commandLine getNdkBuild(),
            '-C', file('src/main/jni').path,
            'APP_BUILD_SCRIPT=Android.mk',
            'NDK_APPLICATION_MK=Application.mk',
            'clean'
}

task deleteNativeBuild(type: Delete) {
    delete file('.externalNativeBuild')
    delete file('src/main/obj')
}

tasks.withType(JavaCompile) { compileTask ->
    compileTask.dependsOn buildBootstrap
}

clean.dependsOn cleanBootstrap
clean.dependsOn deleteNativeBuild

/*task copyReleaseApk(type: Copy) {
    from file("build/outputs/apk/release/${project.ext.apkName}")
    into rootProject.file('.')
}*/
task copyReleaseApk {
    inputs.file "build/outputs/apk/release/${project.ext.apkName}"
    outputs.file '${project.ext.apkName}'
    doLast {
        copy {
            from "build/outputs/apk/release/${project.ext.apkName}"
            into rootProject.file('.')
        }
    }
}

afterEvaluate {
    assembleRelease.finalizedBy copyReleaseApk
}
